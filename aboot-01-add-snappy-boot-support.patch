From fe2112e03316832cd4376a18ed1f4217af9f4546 Mon Sep 17 00:00:00 2001
From: Ondrej Kubik <ondrej.kubik@canonical.com>
Date: Thu, 18 Apr 2019 16:55:07 +0000
Subject: [PATCH 1/4] ubuntu: add snappy boot support

Adding loggic and message passing capabilities betweek bootloader and snapd
Feature is controlled through compile flag:
  SNAPPY_BOOT=1

Signed-off-by: Ondrej Kubik <ondrej.kubik@canonical.com>
---
 app/aboot/aboot.c       |  37 +++++
 app/aboot/rules.mk      |   5 +
 app/aboot/snappy_boot.c | 303 ++++++++++++++++++++++++++++++++++++++++
 app/aboot/snappy_boot.h |  25 ++++
 makefile                |   4 +
 5 files changed, 374 insertions(+)
 create mode 100644 app/aboot/snappy_boot.c
 create mode 100644 app/aboot/snappy_boot.h

diff --git a/app/aboot/aboot.c b/app/aboot/aboot.c
index 2201f1d4..87efc48d 100644
--- a/app/aboot/aboot.c
+++ b/app/aboot/aboot.c
@@ -90,6 +90,11 @@
 #include "scm.h"
 #include "mdtp.h"
 #include "secapp_loader.h"
+
+#if SNAPPY_BOOT
+#include "snappy_boot.h"
+#endif
+
 #include <menu_keys_detect.h>
 #include <display_menu.h>
 #include "fastboot_test.h"
@@ -267,6 +272,10 @@ char battery_soc_ok [MAX_RSP_SIZE];
 
 char get_variant[MAX_RSP_SIZE];
 
+#if SNAPPY_BOOT
+static const char *snappy_cmdline = NULL;
+#endif
+
 extern int emmc_recovery_init(void);
 
 #if NO_KEYPAD_DRIVER
@@ -345,6 +354,12 @@ unsigned char *update_cmdline(const char * cmdline)
 	cmdline_len += strlen(usb_sn_cmdline);
 	cmdline_len += strlen(sn_buf);
 
+#if SNAPPY_BOOT
+	if (snappy_cmdline) {
+		cmdline_len += strlen(snappy_cmdline);
+	}
+#endif
+
 #if VERIFIED_BOOT
 #if !VBOOT_MOTA
 	cmdline_len += strlen(verified_state) + strlen(vbsn[boot_state].name);
@@ -510,6 +525,15 @@ unsigned char *update_cmdline(const char * cmdline)
 		if (have_cmdline) --dst;
 		have_cmdline = 1;
 		while ((*dst++ = *src++));
+#if SNAPPY_BOOT
+		// snappy cmdline
+		if (snappy_cmdline) {
+			src = snappy_cmdline;
+			if (have_cmdline) --dst;
+			have_cmdline = 1;
+			while ((*dst++ = *src++));
+		}
+#endif
 		if (warm_boot) {
 			if (have_cmdline) --dst;
 			src = warmboot_cmdline;
@@ -1040,6 +1064,9 @@ int boot_linux_from_mmc(void)
 	unsigned char *kernel_start_addr = NULL;
 	unsigned int kernel_size = 0;
 	int rc;
+#if SNAPPY_BOOT
+	const char *bootpart;
+#endif
 
 #if DEVICE_TREE
 	struct dt_table *table;
@@ -1072,6 +1099,16 @@ int boot_linux_from_mmc(void)
 		goto unified_boot;
 	}
 	if (!boot_into_recovery) {
+#if SNAPPY_BOOT
+		dprintf(INFO, "checking snap boot configuration\n");
+		snap_get_target_boot_params(&bootpart, &snappy_cmdline);
+		if (strlen(bootpart)) {
+			dprintf(INFO, "snappy: controlled boot partition[%s]\n", bootpart);
+			dprintf(INFO, "snappy: cmdline[%s]\n", snappy_cmdline);
+			index = partition_get_index(bootpart);
+		}
+		else
+#endif
 		index = partition_get_index("boot");
 		ptn = partition_get_offset(index);
 		if(ptn == 0) {
diff --git a/app/aboot/rules.mk b/app/aboot/rules.mk
index 68e1c9b6..6d23fa50 100644
--- a/app/aboot/rules.mk
+++ b/app/aboot/rules.mk
@@ -11,6 +11,11 @@ OBJS += \
 	$(LOCAL_DIR)/fastboot.o \
 	$(LOCAL_DIR)/recovery.o
 
+ifeq ($(SNAPPY_BOOT), 1)
+OBJS += \
+	$(LOCAL_DIR)/snappy_boot.o
+endif
+
 ifeq ($(ENABLE_UNITTEST_FW), 1)
 OBJS += \
 	$(LOCAL_DIR)/fastboot_test.o
diff --git a/app/aboot/snappy_boot.c b/app/aboot/snappy_boot.c
new file mode 100644
index 00000000..88314f46
--- /dev/null
+++ b/app/aboot/snappy_boot.c
@@ -0,0 +1,303 @@
+/**
+ * Copyright (C) 2019 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+  * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <stdlib.h>
+#include <debug.h>
+#include <dev/udc.h>
+#include <string.h>
+#include <kernel/thread.h>
+#include <arch/ops.h>
+#include <arch/defines.h>
+#include <malloc.h>
+
+#include <arch/arm.h>
+#include <dev/flash.h>
+#include <partition_parser.h>
+#include <mmc.h>
+
+#include <lib/ptable.h>
+#include <dev/keys.h>
+#include <platform.h>
+#include <target.h>
+
+
+#include "snappy_boot.h"
+#include "smem.h"
+#include "scm.h"
+
+
+static char cmdline_buf[512];
+static char bootpart_buf[SNAP_NAME_MAX_LEN];
+
+const char* Snap_Permited_Reboot_Reasons[] = {"backup-serial", "restore-serial"};
+#define SNAP_NUM_OF_REBOOT_REASONS 2
+
+static uint32_t crc32(uint32_t crc, unsigned char *buf, size_t len)
+{
+    int k;
+
+    crc = ~crc;
+    while (len--) {
+        crc ^= *buf++;
+        for (k = 0; k < 8; k++)
+            crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
+    }
+    return ~crc;
+}
+
+
+static int map_bootimg(const SNAP_BOOT_SELECTION_t *boot_select, const char *snap_kernel);
+static SNAP_BOOT_SELECTION_t *load_environment();
+static int save_environment(SNAP_BOOT_SELECTION_t *boot_select);
+static SNAP_BOOT_SELECTION_t *load_environment_from_part(const char *partName);
+static int save_environment_to_part(SNAP_BOOT_SELECTION_t *boot_select,
+                                           const char *partName);
+static int StringLenClean(const char *string);
+
+void snap_get_target_boot_params(const char **bootpart, const char **cmdline)
+{
+    char *snap_core, *snap_kernel;
+    char reboot_reason[50] = {'\0'};
+    SNAP_BOOT_SELECTION_t *boot_select = load_environment();
+    int i;
+
+    if (boot_select == NULL)
+        return;
+
+    snap_core = boot_select->snap_core;
+    snap_kernel = boot_select->snap_kernel;
+    if ( !strncmp(boot_select->snap_mode, SNAP_MODE_TRY, SNAP_NAME_MAX_LEN)) {
+        strncpy(boot_select->snap_mode, SNAP_MODE_TRYING, SNAP_NAME_MAX_LEN);
+        if (save_environment(boot_select))
+            goto cleanup;
+        if ( strlen(boot_select->snap_try_core)) {
+            snap_core = boot_select->snap_try_core;
+        }
+        if (strlen( boot_select->snap_try_kernel)) {
+            snap_kernel = boot_select->snap_try_kernel;
+        }
+    } else if ( !strncmp(boot_select->snap_mode, SNAP_MODE_TRYING, SNAP_NAME_MAX_LEN)) {
+        boot_select->snap_mode[0] = 0;
+        if (save_environment(boot_select))
+            goto cleanup;
+    }
+
+    // update boot reason
+    // factory-reset: keep environment value to handle incomplete factory-reset
+    //                if all succeeds new environment is restored from backup
+    // other reboot reason: verify is permitted, clear value
+    // only proceed if there is reboot reason value
+    if (strlen(boot_select->reboot_reason)) {
+        if ( !strncmp(boot_select->reboot_reason,
+                      FACTORY_RESET,
+                      strlen(FACTORY_RESET))) {
+            dprintf(INFO, "snap: Factory reset reboot reason [%s]\n",
+                                                 boot_select->reboot_reason);
+            strncpy(reboot_reason,
+                    boot_select->reboot_reason,
+                    StringLenClean (boot_select->reboot_reason));
+        } else {
+            for (i=0; i < SNAP_NUM_OF_REBOOT_REASONS; ++i) {
+                if ( !strncmp(boot_select->reboot_reason,
+                              Snap_Permited_Reboot_Reasons[i],
+                              strlen(Snap_Permited_Reboot_Reasons[i]))
+                   ) {
+                    dprintf(INFO, "snap: Updating reboot reason [%s]\n",
+                                        boot_select->reboot_reason);
+                    strncpy(reboot_reason,
+                            boot_select->reboot_reason,
+                            StringLenClean (boot_select->reboot_reason));
+                    // clearing reboot reason
+                    boot_select->reboot_reason[0] = 0;
+                    // ignore error for clearing reboot reason
+                    save_environment(boot_select);
+                    break;
+                }
+            }
+        }
+    }
+    map_bootimg(boot_select, snap_kernel);
+    if (strlen(reboot_reason)) {
+        snprintf(cmdline_buf,
+                 sizeof(cmdline_buf),
+                 " snap_core=%s snap_kernel=%s %s ",
+                 snap_core,
+                 snap_kernel,
+                 reboot_reason);
+    } else {
+        snprintf(cmdline_buf,
+                 sizeof(cmdline_buf),
+                 " snap_core=%s snap_kernel=%s ",
+                 snap_core,
+                 snap_kernel);
+    }
+    *cmdline = cmdline_buf;
+    *bootpart = bootpart_buf;
+
+    cleanup:
+        if(boot_select)
+            free(boot_select);
+}
+
+int map_bootimg(const SNAP_BOOT_SELECTION_t *boot_select, const char *snap_kernel)
+{
+    // BootReason takes over normal boot
+    // for UC18, this hardcoded case of boot_recovery for factory reset case
+    if  ( !strncmp(boot_select->reboot_reason,
+                   FACTORY_RESET,
+                   strlen(FACTORY_RESET))) {
+          if (strlen(boot_select->unused_key_01)) {
+              // we need only slot part of partition table ( '_a' or '_b')
+              strncpy(bootpart_buf, boot_select->unused_key_01, SNAP_NAME_MAX_LEN);
+              return 0;
+          } else {
+              strncpy(bootpart_buf,"boot_r", SNAP_NAME_MAX_LEN);
+              return 0;
+          }
+    }
+    for (size_t n = 0; n < SNAP_BOOTIMG_PART_NUM; ++n) {
+        if (!strncmp(boot_select->bootimg_matrix[n][1],
+            snap_kernel,
+            SNAP_NAME_MAX_LEN)) {
+            if (strlen(boot_select->bootimg_matrix[n][0])) {
+                strncpy(bootpart_buf, boot_select->bootimg_matrix[n][0], SNAP_NAME_MAX_LEN);
+                return 0;
+            }
+        }
+    }
+    dprintf(CRITICAL, "snap: map_bootimg: did not find valid boot partition!!!\n");
+    return -1;
+}
+
+// try to load backup env if main fails
+static SNAP_BOOT_SELECTION_t *load_environment()
+{
+    SNAP_BOOT_SELECTION_t *boot_select = load_environment_from_part(SNAP_BOOTSELECT_PARTITION);
+    if (boot_select == NULL) {
+        boot_select = load_environment_from_part(SNAP_BOOTSELECT_PARTITION "bak");
+        // if we successfully loaded backup env, try to save it to main, ignore error
+        if (boot_select)
+            save_environment_to_part( boot_select, SNAP_BOOTSELECT_PARTITION);
+    }
+    return boot_select;
+}
+
+// save always to main and backup env
+static int save_environment(SNAP_BOOT_SELECTION_t *boot_select)
+{
+    // if at least one write works, return success, use two variables, that compiler
+    // does not optimise
+    int r = save_environment_to_part( boot_select, SNAP_BOOTSELECT_PARTITION);
+    int rb = save_environment_to_part( boot_select, SNAP_BOOTSELECT_PARTITION "bak");
+    return r & rb;
+}
+
+static SNAP_BOOT_SELECTION_t *load_environment_from_part(const char *partName)
+{
+    unsigned long long ptn = 0;
+    uint32_t block_size = mmc_get_device_blocksize();
+    uint32_t actual_struct_size, crc;
+    SNAP_BOOT_SELECTION_t *boot_select = NULL;
+    int index = INVALID_PTN;
+    index = partition_get_index(partName);
+    ptn = partition_get_offset(index);
+
+    if(ptn == 0)
+    {
+        dprintf(CRITICAL, "snap: load_environment: ERROR: No %s partition found\n", partName);
+        goto cleanup;
+    }
+
+    actual_struct_size = ROUNDUP(sizeof(SNAP_BOOT_SELECTION_t), block_size);
+    boot_select = malloc(actual_struct_size);
+    if (boot_select == NULL)
+    {
+        dprintf(CRITICAL, "snap: load_environment: ERROR, cannot allocate SNAP_BOOT_SELECTION\n");
+        goto cleanup;
+    }
+
+    mmc_set_lun(partition_get_lun(index));
+    if(mmc_read(ptn, (void *)boot_select, actual_struct_size))
+    {
+        dprintf(CRITICAL, "snap: load_environment(%s): read SNAP_BOOT_SELECTION: ERROR, cannot read Snap boot select info\n", partName);
+        goto cleanup;
+    }
+
+    dprintf(SPEW, "snap: load_environment(%s): read SNAP_BOOT_SELECTION: SUCCESS, read %d bytes\n", partName, actual_struct_size);
+    crc = crc32( 0, (unsigned char *)boot_select, sizeof(SNAP_BOOT_SELECTION_t)-sizeof(uint32_t));
+    if ( boot_select->version != SNAP_BOOTSELECT_VERSION || boot_select->signature != SNAP_BOOTSELECT_SIGNATURE )
+    {
+        dprintf(CRITICAL, "snap: load_environment(%s): ERROR version/signature broken [0x%X] vs [0x%X], [0x%X] vs [0x%X]!\n",
+            partName, boot_select->version, SNAP_BOOTSELECT_VERSION, boot_select->signature, SNAP_BOOTSELECT_SIGNATURE);
+        goto cleanup;
+    }
+    if ( boot_select->crc32 != crc )
+    {
+        dprintf(CRITICAL, "snap: load_environment(%s): ERROR crc32 broken [0x%X] vs [0x%X]!\n", partName, boot_select->crc32, crc );
+        goto cleanup;
+    } else {
+        dprintf(INFO, "snap: load_environment(%s): crc32 sucessfully validated\n", partName );
+    }
+    return boot_select;
+
+    cleanup:
+        if(boot_select)
+            free(boot_select);
+        return NULL;
+}
+
+static int save_environment_to_part( SNAP_BOOT_SELECTION_t *boot_select, const char *partName)
+{
+    unsigned long long ptn = 0;
+    uint32_t block_size = mmc_get_device_blocksize();
+
+    int index = INVALID_PTN;
+
+    ASSERT(boot_select != NULL);
+    boot_select->crc32 = crc32( 0, (unsigned char *)boot_select, sizeof(SNAP_BOOT_SELECTION_t)-sizeof(uint32_t));
+
+    index = partition_get_index(partName);
+    ptn = partition_get_offset(index);
+
+    if(ptn == 0)
+    {
+        dprintf(CRITICAL, "snap: save_environment: ERROR: No %s partition found\n", partName);
+        return -1;
+    }
+
+    mmc_set_lun(partition_get_lun(index));
+    if(mmc_write(ptn, ROUNDUP(sizeof(SNAP_BOOT_SELECTION_t), block_size), (void *)boot_select))
+    {
+        dprintf(CRITICAL, "snap: save_environment: ERROR, cannot write SNAP_BOOTSELECT info\n");
+        return -1;
+    }
+    return 0;
+}
+
+static int StringLenClean(const char *String)
+{
+    int Length;
+    int MaxLength = strlen(String);
+    for (Length = 0;
+         String != NULL
+           && *String != '\0'
+           && *String != ' '
+           && Length < MaxLength;
+         String++, Length++) {
+    }
+    return Length;
+}
diff --git a/app/aboot/snappy_boot.h b/app/aboot/snappy_boot.h
new file mode 100644
index 00000000..4d96b93c
--- /dev/null
+++ b/app/aboot/snappy_boot.h
@@ -0,0 +1,25 @@
+/**
+ * Copyright (C) 2019 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef _BOOTLOADER_SNAP_BOOT_H
+#define _BOOTLOADER_SNAP_BOOT_H
+
+#include "snappy_boot_v1.h"
+
+void snap_get_target_boot_params(const char **bootpart, const char **cmdline);
+
+#endif
diff --git a/makefile b/makefile
index 531aa127..4dd03ff8 100644
--- a/makefile
+++ b/makefile
@@ -107,6 +107,10 @@ ifeq ($(VERIFIED_BOOT),1)
   endif
 endif
 
+ifeq ($(SNAPPY_BOOT),1)
+  DEFINES += SNAPPY_BOOT=1
+endif
+
 ifeq ($(USER_BUILD_VARIANT),true)
   DEFINES += USER_BUILD_VARIANT=1
 endif
-- 
2.26.2

